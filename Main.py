import sys
import inspect
from multiprocessing import freeze_support

from GetApkData import GetApkData
from BuildVocabulary import BuildVocabulary
from RandomClassification import RandomClassification
from HoldoutClassification import HoldoutClassification

def main(IgnoredParameter, MalwareDirectory, GoodwareDirectory, TestBad = "", TestGood = "", ProcessNumber = 3, Option = "", VocabularyDirectory = "VocabularyDirectory"):
    '''
    Main function for malware detection classification

    :param String IgnoredParameter: Drebin.py itself.
    :param String VocabularyDirectory: a temporary folder to store vocabularies generated by Drebin.
    :param String MalwareDirectory: name of the TRAINING malware directory in ApkDatasetDir (containing the apk or .data files).
    :param String GoodwareDirectory: name of the TRAINING goodware directory in ApkDatasetDir (containing the apk or .data files).
    :param String TestBad: name of the TESTING malware directory in ApkDatasetDir (containing the apk or .data files).
    :param String TestGood: name of the TESTING goodware directory in ApkDatasetDir (containing the apk or .data files).
    :param int/String ProcessNumber: number of processes scheduled for data file creation.
    :param String Option: set this parameter for automatically execution.
    '''

    if(type(ProcessNumber)==str):
        ProcessNumber = int(ProcessNumber)
    else:
        print "Choose your option:"
        print "1: Random Split classification"
        print "2: Hold-out test set"
        print "Enter you option:",
        Option=raw_input()

    if Option=="1":
        OptionForGetApkData = raw_input("Do you want to regenerate missing Apk Data Files? [Y/N]")
        if OptionForGetApkData=="Y" or OptionForGetApkData == "y":
            GetApkData(ProcessNumber, MalwareDirectory, GoodwareDirectory)
        TotalFeatureDict = BuildVocabulary(VocabularyDirectory, MalwareDirectory, GoodwareDirectory, TestBad, TestGood)
        RandomClassification(MalwareDirectory, GoodwareDirectory, TotalFeatureDict, "binary")
    if Option=="2":
        if(TestBad=="")or(TestGood==""):
            print "There are some parameters not given, exit."
            return
        OptionForGetApkData = raw_input("Do you want to regenerate missing Apk Data Files? [Y/N]:")
        if OptionForGetApkData=="Y" or OptionForGetApkData == "y":
            GetApkData(ProcessNumber, MalwareDirectory, GoodwareDirectory, TestBad, TestGood)
        TotalFeatureDict = BuildVocabulary(VocabularyDirectory, MalwareDirectory, GoodwareDirectory, TestBad, TestGood)
        HoldoutClassification(MalwareDirectory, GoodwareDirectory, TestBad , TestGood, TotalFeatureDict, "binary")


if __name__ == "__main__":
    freeze_support()
    print inspect.getcallargs(main, *sys.argv)
    #Use this method to display the passed parameters.
    main(*sys.argv)#(Vocabulary Directory, Malware training directory, Goodware training directory, Malware test directory, Goodware test directory, ProcessNumber)